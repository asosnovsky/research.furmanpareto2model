525949 - (2000*4)
525949 / (2000*4)
q()
data <- read.csv("./Q2.data.csv",sep=" ");
ls()
dir()
data <- read.csv("/home/asosnovsky/School/M3330S/Project/Q2.data.csv",sep=" ");
View(data)
colnames(data)
colnames(data) <- c("Age(y)", "Diameter at Breast Heigh(x1)", "Canopy Height(x2)","Stem Density(x3)");
View(data)
library(xtable);
install.packages("xtable")
library(xtable);
print(table, type = "html")
print(xtable(table), type = "html")
data(tli)
View(tli)
fm3 <- glm(disadvg ~ ethnicty*grade, data = tli, family = binomial())
fm3
fm3.table <- xtable(fm3)
print(fm3.table, type = "html")
View(fm3.table)
print(fm3.table, type = "html")
print(tli, type = "html")
install.packages("texreg")
library("texreg")
htmlreg(table,single.row=TRUE)
htmlreg(fm3,single.row=TRUE)
install.packages("stargazer")
library(stargazer)
stargazer(data,type="html")
print(data,type="html",row.names = FALSE)
lm(data["age(y)"]~data["Diameter at Breast Heigh(x1)"])
data["age(y)"]
View(data)
data <- read.csv("/home/asosnovsky/School/M3330S/Project/Q2.data.csv",sep=" ");
colnames(data) <- c("Age (y)", "Diameter at Breast Heigh (x1)", "Canopy Height (x2)","Stem Density (x3)");
lm(data["Age (y)"]~data["Diameter at Breast Heigh (x1)"])
data["Age (y)"]
data["Diameter at Breast Heigh (x1)"]
lm(data["Age (y)"]~data["Diameter at Breast Heigh (x1)"])
data["Age (y)"]~data["Diameter at Breast Heigh (x1)"]
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
group
weight
lm(weight ~ group)
group
weight
lm(data["Age (y)"]~data["Diameter at Breast Heigh (x1)"])
lm(unlist(data["Age (y)"])~unlist(data["Diameter at Breast Heigh (x1)"]))
lm(unlist(data["Age (y)"])~unlist(data["Diameter at Breast Heigh (x1)"]))
lm.x1 <- lm(unlist(data["Age (y)"])~unlist(data["Diameter at Breast Heigh (x1)"]));
lm.x2 <- lm(unlist(data["Age (y)"])~unlist(data["Canopy Height (x2)"]));
lm.x3 <- lm(unlist(data["Age (y)"])~unlist(data["Stem Density (x3)"]));
data <- read.csv("/home/asosnovsky/School/M3330S/Project/Q2.data.csv",sep=" ");
colnames(data) <- c("Age (y)", "Diameter Breast Heigh (x1)", "Canopy Height (x2)","Stem Density (x3)");
print(data,row.names = FALSE)
lm.x1 <- lm(unlist(data["Age (y)"])~unlist(data["Diameter Breast Heigh (x1)"]));
lm.x2 <- lm(unlist(data["Age (y)"])~unlist(data["Canopy Height (x2)"]));
lm.x3 <- lm(unlist(data["Age (y)"])~unlist(data["Stem Density (x3)"]));
lm.x1
str(lm.x1)
summary.lm(lm.x1)
coef(lm.x1)
unlist(coef(lm.x1))
str(coef(lm.x1))
coef(lm.x1)[1]
coef(lm.x1)[[1]
]
coef(lm.x1)[[1]]
coef(lm.x1)[[2]]
coef(lm.x1)[[3]]
coef(lm.x3)[[2]]
digits()
digits(4)
coef(lm.x3)[[2]]
options(digits=2)
coef(lm.x3)[[2]]
options(digits=4)
coef(lm.x3)[[2]]
options(digits=4)
coef(lm.x3)[[2]]
2.0165*10^{-4}
round( 2.016510^{-4})
round(coef(lm.x3)[[2]])
round(coef(lm.x3)[[2]],4)
round(coef(lm.x3)[[2]],3)
round(coef(lm.x3)[[2]],5)
round(coef(lm.x3)[[2]],7)
round(coef(lm.x3)[[2]],8)
round(coef(lm.x3)[[2]],7)
round(coef(lm.x3)[[2]],5)
round(coef(lm.x3)[[2]],6)
3) $Y=$ `r coef(lm.x3)[[1]]` $+$ `r coef(lm.x3)[[2]]/(10^-4)`$X$
3) $Y=$ `r coef(lm.x3)[[1]]` $+$ `r coef(lm.x3)[[2]]*10^4`$X$
3) $Y=$ `r coef(lm.x3)[[1]]` $+$ `r coef(lm.x3)[[2]]*10^4`$\cdot10^4 X$
3) $Y=$ `r coef(lm.x3)[[1]]` $+$ `r coef(lm.x3)[[2]]*10^4`$\cdot10^-4 X$
predict((lm.x2))
predict(lm.x2)
predict.lm(lm.x2)
confint(lm.x2)
lm("Age (y)"~"Stem Density (x3",data)
lm("Age (y)"~"Stem Density (x3",data)
data <- read.csv("/home/asosnovsky/School/M3330S/Project/Q2.data.csv",sep=" ");
colnames(data) <- c("Age (y)", "Diameter Breast Heigh (x1)", "Canopy Height (x2)","Stem Density (x3)");
print(data,row.names = FALSE);
colnames(data) <- c("y","x1","x2","x3")
lm(y~x1,data=data)
lm.x1 <- lm(y~x1,data=data);
lm.x2 <- lm(y~x2,data=data);
lm.x3 <- lm(y~x3,data=data);
coeff(lm.x1)
coef(lm.x1)
summary.lm(lm.x1)
effects(lm.x1)
vcov(lm.x1)
lm.x1$model
confint(lm.x1)
cconfint.lm(lm.x1)
cconfint(lm.x1)
cconfint.lm(lm.x1)
confint(lm.x1)
confint.lm(lm.x1)
confint(lm.x1)
fprintf
sprintf
lm.x1
lm.x1$terms
lm.x1$fitted.values\
lm.x1$fitted.values
summary(lm.x1)
coef(summary(lm.x1))
coef(summary(lm.x1))[,"t value"]
coef(summary(lm.x1))[,"t value"]
coef(summary(lm.x1))[,"t value"][[1]]
coef(summary(lm.x1))[,"t value"][[2]]
coef(summary(lm.x1))[,"t value"]
coef(summary(lm.x1))
tval = list(x1=list(),x2=list(),x3=list());
tval <- funtion(lm.model){
coef(summary(lm.model))[,"t value"];
}
tval <- funtion(lm.model){
tval <- funtion(lm.model) {
tval <- funtion(lm.model) {
tval <- funtion(lm.model) {
coef(summary(lm.model))[,"t value"];
tval <- funtion(model) {
tval <- funtion(model) coef(summary(model))[,"t value"];
norm <- function(x) sqrt(x%*%x)
tval <- function(model) coef(summary(model))[,"t value"];
data <- read.csv("/home/asosnovsky/School/M3330S/Project/Q2.data.csv",sep=" ");
colnames(data) <- c("Age (y)", "Diameter Breast Heigh (x1)", "Canopy Height (x2)","Stem Density (x3)");
print(data,row.names = FALSE);
colnames(data) <- c("y","x1","x2","x3")
lm.x1 <- lm(y~x1,data=data);
lm.x2 <- lm(y~x2,data=data);
lm.x3 <- lm(y~x3,data=data);
tval <- function(model) coef(summary(model))[,"t value"];
tval(lm.x1)
tval(lm.x1) < c(1,1)
tval(lm.x1) < c(1,1)
coef(summary(lm.model))
coef(summary(lm.x1))
summary(lm.x1)
coef(summary(lm.x1))
summary(lm.x1)
coef(lm.x1)
lm.fit(lm.x1)
confint(lm.x1)
effects(lm.x1)
names(lm.x1)
model(lm.x1)
lm.x1$model
names(lm.x1)
lm.x1$call
lm.x1$coefficients
lm.x1$fstatistic
lm.x1
summarylm.x1
summary(lm.x1)
names(summary(lm.x1))
summary(lm.x1)$df
summary(lm.x1)$sigma
summary(lm.x1)$terms
names(summary(lm.x1))
summary(lm.x1)$fstatistic
summary(lm.x1)
names(summary(lm.x1))
summary(lm.x1)$aliased
a<-tval(lm.x1)[[2]]
a<0.05
(a<0.05)
(a<0.05)*"hey"
0*"hey"
(a<0.05)?"hey":"ney"
if(a<0.05) ">" else "<"
testVal <- function(val,prec) if(val<prec) sprintf("Do not reject as %s<%s",val,prec) else sprintf("Reject as %s>%s",val,prec)
testVal(0.01,0.04)
$t\text{-value}(\beta_1)=`r tval(lm.x1)[[2]]` \`r testVal(tval(lm.x1)[[2]],0.05)$,<br>
$t\text{-value}(\beta_0)=`r tval(lm.x1)[[1]]`$, `r testVal(tval(lm.x1)[[1]],0.05)`
source('./case1.R');
homeDir <- paste0(path.expand('~'),'/','Projects/York/M3330S/');
data <- read.xlsx(paste0(homeDir,'Case 1 - Insurance Claim.xlsx'),1);
paste0(homeDir,'Case 1 - Insurance Claim.xlsx')
require('xlsx');
data <- read.xlsx(paste0(homeDir,'Case 1 - Insurance Claim.xlsx'),1);
data <- data[1][[1]];
n            <- length(data);
sam.mean     <- mean(data);
sam.st.dev   <- sd(data);
Î±            <- 0.05;
assumed.mean <- 16000;
test.stat      <- (assumed.mean - sam.mean)/(sam.st.dev/sqrt(n))
source('/home/asosnovsky/Projects/York/M3330S/case1.R');
I
I(test.stat)
data <- read.csv("/home/asosnovsky/School/M3330S/Project/Q2.data.csv",sep=" ");
colnames(data) <- c("Age (y)", "Diameter Breast Heigh (x1)", "Canopy Height (x2)","Stem Density (x3)");
print(data,row.names = FALSE);
colnames(data) <- c("y","x1","x2","x3")
lm.x1 <- lm(y~x1,data=data);
lm.x2 <- lm(y~x2,data=data);
lm.x3 <- lm(y~x3,data=data);
tval <- function(model) coef(summary(model))[,"t value"];
testVal <- function(val,prec) if(val<prec) sprintf("Do not reject as $%s<%s$",val,prec) else sprintf("Reject as $%s>%s$",val,prec)
summary(lm.x1)
names(summary(lm.x1))
summary(lm.x1)$fstatistic
summary(lm.x1)$fstatistic$value
summary(lm.x1)$fstatistic[[1]]
fval <- function(model) summary(model)$fstatistic[[1]];
fval(lm.x1)
fval(lm.x2)
fval(lm.x3)
fval(lm.x1)
Fdist
qf
qf(0.05,20,2
)
qf(0.05,20,2)
summary(model)$fstatistic[
summary(model)$fstatistic
summary(lm.x1)$fstatistic
summary(lm.x2)$fstatistic
qf(0.05,1,22)
qf(fval(lm.x1),1,22)
pf(fval(lm.x1),1,22)
genText <- function(model) sprintf("$F_1=%2.4f, with $p_\text{value}=%2.4f, so %s", fval(model), 1-pf(fval(model),1,22), testVal(1-pf(fval(model),1,22),0.05))
genText(lm.x2)
testVal <- function(val,prec) if(val<prec) sprintf("Do not reject as $%s<%s$",val,prec) else sprintf("Reject as $%2.4f>%2.4f$",val,prec)
genText(lm.x2)
sign(-1)
sign(-10)
sign(10)
a=-1
if(a<0) "+" else "-"
# Main data source: ACS_13_5YR_DP03.zip
rm(list=ls());
# Working Dir
homeDir = "~/Projects/York/Research/data";#linux
setwd(homeDir);
# Create Tidy-folder if not already there
dir.create(file.path(homeDir,"tidy/"), showWarnings = F);
# Reset Main Folders
tidyFolder = file.path(homeDir, 'tidy/ACS_13_5YR_DP03');
origFolder = file.path(homeDir, 'original/ACS_13_5YR_DP03');
## Clean
unlink(tidyFolder, r = T, f = T);
unlink(origFolder, r = T, f = T);
## Make
dir.create(tidyFolder, showWarnings = T);
unzip(file.path(homeDir,'ACS_13_5YR_DP03/ACS_13_5YR_DP03.zip'),exdir=origFolder);
### Make Family/House Data
dir.create(file.path(tidyFolder,'family'), showWarnings = FALSE);
dir.create(file.path(tidyFolder,'house'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','home.family.R'));
famHouse(origFolder,tidyFolder);
### Make family county by income data
dir.create(file.path(tidyFolder,'county.by.income'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','county.by.income.R'));
data.all <- countIncome(file.path(homeDir,'original'), tidyFolder);
### Make family county by totals data
dir.create(file.path(tidyFolder,'county.totals'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','county.totals.R'));
countTot(file.path(homeDir,'original'), tidyFolder);
### Flipped data
dir.create(file.path(tidyFolder,'county.by.income.flipped'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','flipped.R'));
flipData();
### Make Aggregate Data
dir.create(file.path(tidyFolder,'aggregate'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','aggregate.R'));
data.aggs <- aggData(file.path(homeDir,'original'), tidyFolder,4);
for(state in names(data.aggs)) {
barplot((data.aggs[[state]]), main=state, legend.text = colnames(data.aggs[[state]]));
}
for(state in names(data.aggs)) {
barplot(t(data.all[[state]]), main=state
#,legend.text = colnames(data.all[[state]])
);
}
rm(list=ls());
# Working Dir
homeDir = "~/Projects/York/Research/data";#linux
setwd(homeDir);
# Create Tidy-folder if not already there
dir.create(file.path(homeDir,"tidy/"), showWarnings = F);
# Reset Main Folders
tidyFolder = file.path(homeDir, 'tidy/ACS_13_5YR_DP03');
origFolder = file.path(homeDir, 'original/ACS_13_5YR_DP03');
## Clean
unlink(tidyFolder, r = T, f = T);
unlink(origFolder, r = T, f = T);
## Make
dir.create(tidyFolder, showWarnings = T);
unzip(file.path(homeDir,'ACS_13_5YR_DP03/ACS_13_5YR_DP03.zip'),exdir=origFolder);
### Make Family/House Data
dir.create(file.path(tidyFolder,'family'), showWarnings = FALSE);
dir.create(file.path(tidyFolder,'house'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','home.family.R'));
famHouse(origFolder,tidyFolder);
### Make family county by income data
dir.create(file.path(tidyFolder,'county.by.income'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','county.by.income.R'));
data.all <- countIncome(file.path(homeDir,'original'), tidyFolder);
### Make family county by totals data
dir.create(file.path(tidyFolder,'county.totals'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','county.totals.R'));
countTot(file.path(homeDir,'original'), tidyFolder);
### Flipped data
dir.create(file.path(tidyFolder,'county.by.income.flipped'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','flipped.R'));
flipData();
### Make Aggregate Data
dir.create(file.path(tidyFolder,'aggregate'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','aggregate.R'));
data.aggs <- aggData(file.path(homeDir,'original'), tidyFolder,4);
data.aggs
for(state in names(data.aggs)) {
barplot((data.aggs[[state]]), main=state, legend.text = colnames(data.aggs[[state]]));
}
for(state in names(data.aggs)) {
barplot(t(data.all[[state]]), main=state
#,legend.text = colnames(data.all[[state]])
);
}
source(file.path(homeDir,'ACS_13_5YR_DP03','flipped.R'));
flipData();
warnings()
View(data.flip$Alabama)
source(file.path(homeDir,'ACS_13_5YR_DP03','flipped.R'));
flipData();
View(data.flip$Alabama)
barplot(data.flip$Alabama)
barplot(log(data.flip$Alabama))
barplot(exp(data.flip$Alabama))
data.flip$Alabama
data.flip$Alabama[1,]
data.flip$Alabama[,1]
log(data.flip$Alabama[,1])
barplot(log(data.flip$Alabama[,1]))
plot(log(data.flip$Alabama[,1]))
plot(log(data.flip$Alabama[,1]),type='l')
plot(log(data.flip$Alabama[,2]),type='l')
plot(log(data.flip$Alabama[,3]),type='l')
plot((data.flip$Alabama[,2]),type='l')
plot((data.flip$Alabama[,1]),type='l')
plot((data.flip$Alabama[,10]),type='l')
plot((data.flip$Alabama),type='l')
barplot((data.flip$Alabama),type='l')
barplot((data.flip$Alabama[1,]),type='l')
plot((data.flip$Alabama[1,]),type='l')
plot(log(data.flip$Alabama[1,]),type='l')
plot(exp(data.flip$Alabama[1,]),type='l')
plot(log(data.flip$Alabama[1,]),type='l')
dpareto <- function(x, xm, alpha) ifelse(x > xm , alpha*xm**alpha/(x**(alpha+1)), 0)
ppareto <- function(q, xm, alpha) ifelse(q > xm , 1 - (xm/q)**alpha, 0 )
qpareto <- function(p, xm, alpha) ifelse(p < 0 | p > 1, NaN, xm*(1-p)**(-1/alpha))
rpareto <- function(n, xm, alpha) qpareto(runif(n), xm, alpha)
pareto.mle <- function(x)
{
xm <- min(x)
alpha <- length(x)/(sum(log(x))-length(x)*log(xm))
return( list(xm = xm, alpha = alpha))
}
pareto.test <- function(x, B = 1e3)
{
a <- pareto.mle(x)
# KS statistic
D <- ks.test(x, function(q) ppareto(q, a$xm, a$alpha))$statistic
# estimating p value with parametric bootstrap
B <- 1e5
n <- length(x)
emp.D <- numeric(B)
for(b in 1:B)
{
xx <- rpareto(n, a$xm, a$alpha);
aa <- pareto.mle(xx)
emp.D[b] <- ks.test(xx, function(q) ppareto(q, aa$xm, aa$alpha))$statistic
}
return(list(xm = a$xm, alpha = a$alpha, D = D, p = sum(emp.D > D)/B))
}
pareto.test(data.flip$Alabama[,1])
pareto.test(data.flip$Alabama[1,])
?ks.test
pareto.test(data.flip$Alabama[2,])
barplot(data.flip$Alabama[1:2,])
pareto.test(log(data.flip$Alabama[2,]))
barplot(log(data.flip$Alabama[1:2,]))
log(data.flip$Alabama[2,])
log(data.flip$Alabama[2,])
View(log(data.flip$Alabama[2,]))
View((data.flip$Alabama[2,]))
View((data.flip$Alabama[,]))
View((data.flip$Alabama[1,]))
View(unlist(data.flip$Alabama[1,]))
unlist((data.flip$Alabama[1,]))
unlist((data.flip$Alabama[[1]))
unlist((data.flip$Alabama[[1]]))
((data.flip$Alabama[[1]]))
((data.flip$Alabama[[1,]]))
((data.flip$Alabama[[1:2]]))
((data.flip$Alabama[[2]]))
((data.flip$Alabama[2,]))
(unlist(data.flip$Alabama[2,]))
barplot(unlist(data.flip$Alabama[2,]))
barplot(log(data.flip$Alabama[2,]))
barplot(log(data.flip$Alabama[2:10,]))
barplot((data.flip$Alabama[2:10,]))
barplot(log(data.flip$Alabama[2:10,]))
barplot(data.all)
barplot(data.all$Alaska)
barplot(data.all$Alabama)
barplot(log(data.flip$Alabama))
barplot(data.all$Alabama)
barplot(log(data.all$Alabama))
barplot(log(data.flip$Alabama))
barplot(log(data.all$Alabama))
View(log(data.all$Alabama))
View(log(data.all$Alabama)'')
View(log(data.all$Alabama)')
View(t(log(data.all$Alabama)))
View(t(log(data.all$Alabama))))
View(t(log(data.all$Alabama)))
barplot(t(log(data.all$Alabama)))
barplot(log(data.flip$Alabama))
barplot(t(log(data.all$Alabama)))
barplot(log(data.flip$Alabama[4,5]))
barplot(log(data.flip$Alabama[4:5,]))
barplot(t(log(data.all$Alabama[4:5,])))
barplot(t(log(data.all$Alabama[,4:5])))
barplot(t(log(data.all$Alabama[,4:5])))
barplot(log(data.flip$Alabama[4:5,]))
barplot(t(log(data.all$Alabama[,4:5])))
barplot(t((data.all$Alabama[,4:5])))
barplot(t(log(data.all$Alabama[,4:5])))
pareto.test(t(log(data.all$Alabama[,4:5])))
pareto.test(t(log(data.all$Alabama[,4])))
pareto.test(t(log(data.all$Alabama[,5])))
# Main data source: ACS_13_5YR_DP03.zip
rm(list=ls());
# Working Dir
homeDir = "~/Projects/York/Research/data";#linux
setwd(homeDir);
# Create Tidy-folder if not already there
dir.create(file.path(homeDir,"tidy/"), showWarnings = F);
# Reset Main Folders
tidyFolder = file.path(homeDir, 'tidy/ACS_13_5YR_DP03');
origFolder = file.path(homeDir, 'original/ACS_13_5YR_DP03');
## Clean
unlink(tidyFolder, r = T, f = T);
unlink(origFolder, r = T, f = T);
## Make
dir.create(tidyFolder, showWarnings = T);
unzip(file.path(homeDir,'ACS_13_5YR_DP03/ACS_13_5YR_DP03.zip'),exdir=origFolder);
### Make Family/House Data
dir.create(file.path(tidyFolder,'family'), showWarnings = FALSE);
dir.create(file.path(tidyFolder,'house'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','home.family.R'));
famHouse(origFolder,tidyFolder);
### Make family county by income data
dir.create(file.path(tidyFolder,'county.by.income'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','county.by.income.R'));
data.all <- countIncome(file.path(homeDir,'original'), tidyFolder);
### Make family county by totals data
dir.create(file.path(tidyFolder,'county.totals'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','county.totals.R'));
countTot(file.path(homeDir,'original'), tidyFolder);
### Flipped data
dir.create(file.path(tidyFolder,'county.by.income.flipped'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','flipped.R'));
flipData();
### Make Aggregate Data
dir.create(file.path(tidyFolder,'aggregate'), showWarnings = FALSE);
source(file.path(homeDir,'ACS_13_5YR_DP03','aggregate.R'));
data.aggs <- aggData(file.path(homeDir,'original'), tidyFolder,4);
for(state in names(data.aggs)) {
barplot((data.aggs[[state]]), main=state, legend.text = colnames(data.aggs[[state]]));
}
for(state in names(data.aggs)) {
barplot(t(data.all[[state]]), main=state
#,legend.text = colnames(data.all[[state]])
);
}
nObs = 100
nObs = 67
mod(nObs,2)
